create database dbInventory
use dbInventory              --new

create table Department(
DepId int primary key identity(1,1),
DepName varchar(100) not null,
City varchar(100) not null
)
select * from Department

create table Employee(
EmployeeId int primary key identity(1,1),
FullName varchar(50) not null,
Email varchar(100) not null unique,
Address varchar(50),
Phone varchar(20),
Password varchar(50) not null,
BackupPassword varchar(50) not null,
Gender varchar(50),
DateOfBirth date,
Roll varchar(10) not null,
DepId int foreign key references Department(DepId) on delete cascade
)
select * from Employee

create table Customer(
CustId int primary key identity(1,1),
FullName varchar(50) not null,
Email varchar(100) not null unique,
Address varchar(50),
Phone varchar(20),
Password varchar(50) not null,
BackupPassword varchar(50) not null,
Gender varchar(50),
DateOfBirth date
)
select * from Customer

alter table Customer
drop column Password, BackupPassword

create table Supplier(
SupplierId int primary key identity(1,1),
SupplierName varchar(100) not null,
Email varchar(100) not null unique,
Address varchar(50) not null,
Phone varchar(20)
)
select * from Supplier

create table Inventory(
ProductId int primary key identity(1,1),
ProductName varchar(100) not null,
RetailPrice money not null,
WholesalePrice money not null,
ManufactureDate date not null,
AmountAvailable int not null,
isAvailable bit not null,
SupplierId int foreign key references Supplier(SupplierId) on delete cascade
)
select * from Inventory

create table Orders(
OrderId int primary key identity(1,1),
CustId int foreign key references Customer(CustId) on delete cascade,
OrderDate date not null,
DeliveryDate date not null
)
select * from Orders

create table OrderDetail(
OrderDetailId int primary key identity(1,1),
OrderId int foreign key references Orders(OrderId) on delete cascade,
ProductId int foreign key references Inventory(ProductId) on delete cascade,
Quantity int not null,
TotalPrice money not null,
RetailPrice money not null,
WholesalePrice money not null
)

create table Discount(
DiscountId int primary key identity(1,1),
DiscountName varchar(50) not null,
DiscountCode varchar(50) not null,
Status bit not null,
DiscountAmount float not null,
)
select * from Discount

create table DiscountDetail(
DiscountDetailId int primary key identity(1,1),
DiscountId int foreign key references Discount(DiscountId) on delete cascade,
SupplierId int foreign key references Supplier(SupplierId) on delete cascade,
AppliedDate date not null,
RedeemedInTotal int
)
select * from DiscountDetail

create table RecentActivity(
ActivityId int primary key identity(1,1),
ActivityDate date not null,
ActivityType Char not null,/*this table will hold I for insert,U for update, and D for delete*/
EmployeeId int foreign key references Employee(EmployeeId),
SupplierId int foreign key references Supplier(SupplierId) on delete cascade,
ProductId int foreign key references Inventory(ProductId)
)
select * from RecentActivity

--data inserted
insert into Department values('DepA', 'Addis Ababa')
insert into Department values('DepB', 'Addis Ababa')
insert into Department values('DepC', 'Addis Ababa')

insert into Employee values('EmpA', 'EmpA@gmail.com', 'Addis Ababa', '2519123456', 'EmpA1234', 'EmpA5678', 'Female', '2001-01-01', 'Admin', 1)
insert into Employee values('EmpB', 'EmpB@gmail.com', 'Addis Ababa', '2519234567', 'EmpB1234', 'EmpB5678', 'Male', '2002-02-02', 'Staff', 2)
insert into Employee values('EmpC', 'EmpC@gmail.com', 'Addis Ababa', '2519234568', 'EmpC1234', 'EmpC5678', 'Male', '2002-03-02', 'Admin', 2)
--new employees added

insert into Customer values('CustA', 'CustA@gmail.com', 'Addis Ababa', '2519234568', 'Male', '2002-02-02')
insert into Customer values('CustB', 'CustB@gmail.com', 'Adama', '2519234569', 'Female', '2003-03-23')

insert into Supplier values('SupA', 'SupA@gmail.com', 'Bahir Dar', '2519123455')
insert into Supplier values('SupB', 'SupB@gmail.com', 'Addis Ababa', '2519123458')
insert into Supplier values('SupC', 'SupC@gmail.com', 'Addis Ababa', '2519123459')

update Supplier set Email = 'SupNew@gmail.com' where SupplierName = 'SupC'


insert into Inventory values('ProdA', 25, 20, '2022-05-05', 4, 1, 1)
insert into Inventory values('ProdB', 35, 30, '2022-06-05', 6, 1, 1)
insert into Inventory values('ProdC', 45, 40, '2022-07-05', 3, 1, 2)
insert into Inventory values('ProdD', 55, 50, '2022-07-01', 7, 1, 2)
insert into Inventory values('ProdE', 65, 60, '2022-04-01', 8, 1, 1)


insert into Orders values(1, getdate(), getdate() + 3)
insert into Orders values(1, getdate() - 1, getdate() + 3)
insert into Orders values(2, getdate(), getdate() + 3)
insert into Orders values(2, getdate() - 1, getdate() + 3)

insert into OrderDetail values(1, 1, 2, 40, 25, 20)
insert into OrderDetail values(1, 2, 3, 90, 35, 30)
insert into OrderDetail values(1, 3, 4, 160, 45, 40)
insert into OrderDetail values(1, 4, 5, 250, 55, 50)
insert into OrderDetail values(2, 1, 2, 40, 25, 20)
insert into OrderDetail values(2, 2, 3, 90, 35, 30)

--stored procedure
create procedure SelectAdmin
@email varchar(50),
@password varchar(50)
as
begin
select * from Employee where (Email = @email and Password = @password) and  Roll = 'Admin'
end
exec SelectAdmin 'EmpA@gmail.com', 'EmpA1234'

create procedure SelectStaff
@email varchar(50),
@password varchar(50)
as
begin
select * from Employee where (Email = @email and Password = @password) and  Roll = 'Staff'
end
exec SelectStaff 'EmpB@gmail.com', 'EmpB1234'

create procedure updateEmployeeInfo
@FullName varchar(50),
@Email varchar(100),
@NewEmail varchar(100),
@Address varchar(50),
@Phone varchar(20),
@Password varchar(50),
@DateOfBirth date,
@DepId int
as
begin
update Employee
set FullName = @FullName, Email = @NewEmail, Address = @Address, Phone = @Phone, Password = @Password, DateOfBirth = @DateOfBirth, DepId = @DepId
where Email = @Email
end
exec updateEmployeeInfo 'EmpNew', 'EmpC@gmail.com', 'EmpNew@gmail.com', 'Addis Ababa', '912345678','EmpNew1234', '2002-04-23', 1

create procedure addEmployee
@FullName varchar(50),
@Email varchar(100),
@Address varchar(50),
@Phone varchar(20),
@Password varchar(50),
@BackupPassword varchar(50),
@Gender varchar(50),
@DateOfBirth date,
@Roll varchar(10),
@DepId int
as
begin
insert into Employee values(@FullName, @Email, @Address, @Phone, @Password, @BackupPassword, @Gender, @DateOfBirth, @Roll, @DepId)
end
exec addEmployee 'EmpD', 'EmpD@gmail.com', 'Addis Ababa', '2519234577', 'EmpD1234', 'EmpD5678', 'Female', '2010-03-02', 'Staff', 1

create procedure displayBestSellers
as
begin
select sum(OD.Quantity) as BestSold, I.ProductName from OrderDetail OD join Inventory I on OD.ProductId = I.ProductId group by I.ProductName order by sum(OD.Quantity) desc
end
exec displayBestSellers

--function
create function lowOnStock()
returns table
as
return (select ProductName, AmountAvailable from Inventory where AmountAvailable <= 5)
select * from lowOnStock()

alter function displayGrossRevenue()
returns table
as
return (select OrderDate, sum(TotalPrice) as total from Orders O join OrderDetail OD on O.OrderId = OD.OrderId group by OrderDate)
select * from displayGrossRevenue()

create function countOrders()
returns int
as
begin
return(select count(OrderId) from Orders)      --orders
end
select dbo.countOrders()

create function CalculateProfit()     --profit
returns money
as
begin
declare @sumRetail money, @sumWholesale money, @sumQuantity money, @profit money
select @sumRetail = sum(RetailPrice) from OrderDetail 
select @sumWholesale = sum(WholesalePrice) from OrderDetail
select @sumQuantity = sum(Quantity) from OrderDetail 
set @profit = (@sumRetail - @sumWholesale)* @sumQuantity
return @profit
end
select dbo.CalculateProfit()

create function calculateEarnings()
returns money
as
begin
return(select sum(totalPrice) from OrderDetail )   --earnings
end
select dbo.calculateEarnings()

alter function viewAllOrders()
returns table
as
return (select C.FullName, O.OrderId, O.OrderDate, O.DeliveryDate, S.SupplierId, S.SupplierName, OD.ProductId, I.ProductName, OD.Quantity, OD.TotalPrice, OD.RetailPrice, OD.WholesalePrice from Orders O join OrderDetail OD on O.OrderId = OD.OrderId join Customer C on O.CustId = C.CustId join Inventory I on OD.ProductId = I.ProductId join Supplier S on I.SupplierId = S.SupplierId)
select * from viewAllOrders()

alter function searchByOrderId(@id varchar(50))  --not used currently
returns table
as
return (select C.FullName, O.OrderId, O.OrderDate, O.DeliveryDate, S.SupplierId, S.SupplierName, OD.ProductId, I.ProductName, OD.Quantity, OD.TotalPrice, OD.RetailPrice, OD.WholesalePrice from Orders O join OrderDetail OD on O.OrderId = OD.OrderId join Customer C on O.CustId = C.CustId join Inventory I on OD.ProductId = I.ProductId join Supplier S on I.SupplierId = S.SupplierId where O.OrderId like '%'+@id+'%')
select* from searchByOrderId(1)

create function searchByDate(@id varchar(50), @startDate date, @endDate date)
returns table
as
return (select C.FullName, O.OrderId, O.OrderDate, O.DeliveryDate, S.SupplierId, S.SupplierName, OD.ProductId, I.ProductName, OD.Quantity, OD.TotalPrice, OD.RetailPrice, OD.WholesalePrice from Orders O join OrderDetail OD on O.OrderId = OD.OrderId join Customer C on O.CustId = C.CustId join Inventory I on OD.ProductId = I.ProductId join Supplier S on I.SupplierId = S.SupplierId where O.OrderId like '%'+@id+'%' and OrderDate between @startDate and @endDate)
select* from searchByDate(1, '2022-09-24', '2022-09-24')

create function categoryBySupplier(@supplier varchar(50))
returns table
as
return (select C.FullName, O.OrderId, O.OrderDate, O.DeliveryDate, S.SupplierId, S.SupplierName, OD.ProductId, I.ProductName, OD.Quantity, OD.TotalPrice, OD.RetailPrice, OD.WholesalePrice from Orders O join OrderDetail OD on O.OrderId = OD.OrderId join Customer C on O.CustId = C.CustId join Inventory I on OD.ProductId = I.ProductId join Supplier S on I.SupplierId = S.SupplierId where S.SupplierName = @supplier)
select * from categoryBySupplier('SupB')

create function returnEmployeeInfo(@email varchar(50))
returns table
as
return (select * from Employee where Email = @email)
select * from returnEmployeeInfo('EmpC@gmail.com')

create function returnRecentActivity()
returns table
as
return (select * from RecentActivity)
select * from returnRecentActivity()

create function returnRecentSupplierInfo()
returns table
as 
return (select R.ActivityDate, R.ActivityType, E.FullName, S.SupplierName from RecentActivity R join Employee E on R.EmployeeId = E.EmployeeId join Supplier S on R.SupplierId = S.SupplierId) 
select * from returnRecentSupplierInfo()

create function returnRecentInventoryInfo()
returns table
as 
return (select R.ActivityDate, R.ActivityType, E.FullName, I.ProductName from RecentActivity R join Employee E on R.EmployeeId = E.EmployeeId join Inventory I on R.ProductId = I.ProductId) 
select * from returnRecentInventoryInfo()


--Trigger
create trigger addIntoRecentActivity
on Supplier
after insert, update, delete
as
begin
declare @ActivityType char, @EmployeeId int, @SupplierId int, @ProductId int
if (select count(*) from deleted) = 0 and (select count(*) from inserted) >=1
  begin
  set @ActivityType = 'I'
  select @SupplierId = SupplierId from inserted
  end
else if (select count(*) from inserted) = 0 and (select count(*) from deleted) >=1
  begin
  set @ActivityType = 'D'
  select @SupplierId = SupplierId from deleted
  end
else
  begin
  set @ActivityType = 'U'
  select @SupplierId = SupplierId from inserted
  end
set @EmployeeId = 1
insert into RecentActivity values (cast(getdate() as date), @ActivityType, @EmployeeId, @SupplierId, @ProductId)
end

create trigger addIntoRecentsInventory
on Inventory
after insert, update, delete
as
begin
declare @ActivityType char, @EmployeeId int, @SupplierId int, @ProductId int
if (select count(*) from deleted) = 0 and (select count(*) from inserted) >=1
  begin
  set @ActivityType = 'I'
  select @ProductId = ProductId from inserted
  end
else if (select count(*) from inserted) = 0 and (select count(*) from deleted) >=1
  begin
  set @ActivityType = 'D'
  select @ProductId = ProductId from deleted
  end
else
  begin
  set @ActivityType = 'U'
  select @ProductId = ProductId from inserted
  end
set @EmployeeId = 1
insert into RecentActivity values (cast(getdate() as date), @ActivityType, @EmployeeId, @SupplierId, @ProductId)
end





